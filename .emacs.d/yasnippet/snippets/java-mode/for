# -*- mode: snippet -*-
# ;; This is the ideal defun of the lambda function used in the snippet
# ;; below. Lambda was used to embed Emacs Lisp code without returning
# ;; the function name.
# (defun for-cond (obj)
#   "Returns ++ or -- depending on whether the conditional operator
#   OBJ is > or <."  
#   (let (first-char)
#     (if (and 
# 	 (setq first-char (first (string-to-list obj)))
# 	 (char-equal first-char ?>))
# 	 "--"
#       "++")))
# name: for(int ...; ...; ...) { ... }
# --
for(int ${1:i} = ${2:0}; $1 ${3:<} ${4:val}; $1${3:$((lambda (obj) (let (first-char)
    (if (and 
	 (setq first-char (first (string-to-list obj)))
	 (char-equal first-char ?>))
	 "--"
      "++"))) yas/text)}$5) {
$> $0
}
